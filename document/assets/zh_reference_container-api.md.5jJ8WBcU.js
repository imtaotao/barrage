import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.DKWfLnao.js";const E=JSON.parse('{"title":"容器 API","description":"","frontmatter":{},"headers":[],"relativePath":"zh/reference/container-api.md","filePath":"zh/reference/container-api.md","lastUpdated":1730016756000}'),n={name:"zh/reference/container-api.md"},t=e(`<h1 id="容器-api" tabindex="-1">容器 API <a class="header-anchor" href="#容器-api" aria-label="Permalink to &quot;容器 API&quot;">​</a></h1><p>弹幕容器实例上面有以下一些属性和方法，当你在一些钩子里面获取到 container 实例时，可以参考本小节的知识。你可以通过 <a href="./manager-properties.html#manager-container"><strong><code>manager.container</code></strong></a> 获取实例。</p><div class="note custom-block github-alert"><p class="custom-block-title">注意事项</p><p>如果你需要对容器的宽高做更改，建议使用 <code>manager.setArea()</code> 方法，而不要通过 <code>manager.container.setStyle()</code> 来更改，否则你需要手动调用 <code>manager.format()</code>。</p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLDivElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  parentNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StyleKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CSSStyleDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="container-width" tabindex="-1">container.width <a class="header-anchor" href="#container-width" aria-label="Permalink to &quot;container.width&quot;">​</a></h2><p><strong>类型：<code>number</code></strong><br><strong>默认值：<code>0</code></strong></p><p>容器的宽度，当你调用 <code>manager.format()</code> 后，这个值可能会有变化。</p><h2 id="container-height" tabindex="-1">container.height <a class="header-anchor" href="#container-height" aria-label="Permalink to &quot;container.height&quot;">​</a></h2><p><strong>类型：<code>number</code></strong><br><strong>默认值：<code>0</code></strong></p><p>容器的高度，当你调用 <code>manager.format()</code> 后，这个值可能会有变化。</p><h2 id="container-node" tabindex="-1">container.node <a class="header-anchor" href="#container-node" aria-label="Permalink to &quot;container.node&quot;">​</a></h2><p><strong>类型：<code>HTMLDivElement</code></strong><br><strong>默认值：<code>div</code></strong></p><p>容器的 DOM 节点。</p><h2 id="container-parentnode" tabindex="-1">container.parentNode <a class="header-anchor" href="#container-parentnode" aria-label="Permalink to &quot;container.parentNode&quot;">​</a></h2><p><strong>类型：<code>HTMLElement | null</code></strong><br><strong>默认值：<code>null</code></strong></p><p>容器的父节点，通过 <code>manager.mount()</code> 设置后，可以通过此属性拿到。</p><h2 id="container-setstyle" tabindex="-1">container.setStyle() <a class="header-anchor" href="#container-setstyle" aria-label="Permalink to &quot;container.setStyle()&quot;">​</a></h2><p><strong>类型：<code>setStyle&lt;T extends StyleKey&gt;(key: T, val: CSSStyleDeclaration[T]): void</code></strong></p><p>这个方法可以设置容器节点的样式。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 所以你可以以下方式来给容器设置一些样式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;background&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,20),h=[t];function l(r,p,k,o,d,c){return a(),i("div",null,h)}const y=s(n,[["render",l]]);export{E as __pageData,y as default};
