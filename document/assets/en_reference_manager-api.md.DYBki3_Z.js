import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.DKWfLnao.js";const E=JSON.parse('{"title":"Manager API","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/manager-api.md","filePath":"en/reference/manager-api.md","lastUpdated":1726319815000}'),n={name:"en/reference/manager-api.md"},t=e(`<h1 id="manager-api" tabindex="-1">Manager API <a class="header-anchor" href="#manager-api" aria-label="Permalink to &quot;Manager API&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">Unit Hint</p><p>All units involved in the calculation can be computed through expressions, similar to CSS <code>calc</code>.</p><ol><li><strong><code>number</code></strong>: The default unit is <code>px</code>.</li><li><strong><code>string</code></strong>: Expression calculation. Supports mathematical operations (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), and only <code>%</code> and <code>px</code> units are supported.</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setGap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;(100% - 10px) / 5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></div><h2 id="manager-canpush" tabindex="-1"><code>manager.canPush()</code> <a class="header-anchor" href="#manager-canpush" aria-label="Permalink to &quot;\`manager.canPush()\`&quot;">​</a></h2><p><strong>Type: <code>(type: DanmakuType) =&gt; boolean</code></strong></p><p>Determines whether danmaku can be added. If the memory limit threshold or the rendering quantity threshold is exceeded, adding will be prevented. You can change this by calling <code>manager.setLimits()</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Determine if a facile danmaku can be pushed currently</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canPush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;facile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Determine if a flexible danmaku can be pushed currently</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canPush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;flexible&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="manager-push" tabindex="-1"><code>manager.push()</code> <a class="header-anchor" href="#manager-push" aria-label="Permalink to &quot;\`manager.push()\`&quot;">​</a></h2><p><strong>Type: <code>(data: T, options?: PushOptions&lt;T&gt;) =&gt; boolean</code></strong></p><p>Send a danmaku. This danmaku will be placed in the memory array waiting to be rendered. This is not necessarily rendered immediately; it depends on the rendering algorithm you have set. You can change this by calling <code>manager.setMode()</code>. This will trigger the <code>push</code> hook.</p><div class="note custom-block github-alert"><p class="custom-block-title">Note</p><p></p><ol><li>When sending danmaku, <strong>the data format must be <code>T</code></strong>. The type of <code>T</code> is controlled by you, as long as you can correctly retrieve it during rendering. See the example below for details.</li><li>If the second parameter is not passed, or if some parameters are not passed, the default values will be taken from <code>manager.options</code>.</li></ol></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PushOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DanmakuPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;right&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Simple case:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { create } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;danmu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Send a danmaku.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Time, speed, direction, and other configurations reuse the global parameters passed during \`create()\`.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>Complete case:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { create } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;danmu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Send a danmaku and add plugin processing. The scope of the plugin is limited to the current pushed danmaku.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// If your danmaku has an id, you can add it here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    direction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">danmaku</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        div.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> danmaku.data.content; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 弹幕内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        danmaku.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(div);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="manager-unshift" tabindex="-1"><code>manager.unshift()</code> <a class="header-anchor" href="#manager-unshift" aria-label="Permalink to &quot;\`manager.unshift()\`&quot;">​</a></h2><p><strong>Type: <code>(data: T, options?: PushOptions&lt;T&gt;) =&gt; boolean</code></strong></p><p>The <code>push</code> method adds to the end of the memory array. This method will <strong>add the danmaku to the front of the memory array</strong>. When a user inputs a danmaku and clicks send, you should use this method to ensure that the danmaku <strong>renders immediately</strong> on the next polling. The usage is the same as the <code>push</code> method and will trigger the <code>push</code> hook.</p><h2 id="manager-pushflexibledanmaku" tabindex="-1"><code>manager.pushFlexibleDanmaku()</code> <a class="header-anchor" href="#manager-pushflexibledanmaku" aria-label="Permalink to &quot;\`manager.pushFlexibleDanmaku()\`&quot;">​</a></h2><p><strong>Type: <code>(data: T, options?: PushFlexOptions&lt;T&gt;) =&gt; boolean</code></strong></p><p>Send a flexible danmaku. <strong>Flexible danmaku will render on the next polling</strong> and will trigger the <code>push</code> hook.</p><div class="note custom-block github-alert"><p class="custom-block-title">Flexible Danmaku Explanation</p><p></p><ol><li>The <code>options</code> for flexible danmaku behave the same as the <code>options</code> for facile danmaku. If not provided, default values will be taken from <code>manager.options</code>.</li><li>Flexible danmaku <strong>must pass <code>position</code> to specify the location</strong>. If you need to specify rendering on a particular track, you can use <a href="#manager-gettracklocation"><strong><code>getTrackLocation()</code></strong></a> to achieve this.</li></ol></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { create } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;danmu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PushFlexOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DanmakuPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;left&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;right&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Facile danmaku does not have &#39;none&#39;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Position</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">danmaku</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Danmaku</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">container</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Send a danmaku, positioned at the center of the container, stationary for 5s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushFlexibleDanmaku</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  direction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">danmaku</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Or use the string expression \`50% - (\${danmaku.getWidth()} / 2)\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: (container.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> danmaku.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: (container.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> danmaku.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="manager-gettracklocation" tabindex="-1"><code>manager.getTrackLocation()</code> <a class="header-anchor" href="#manager-gettracklocation" aria-label="Permalink to &quot;\`manager.getTrackLocation()\`&quot;">​</a></h2><p><strong>Type: <code>(i: number) =&gt; { start: number, middle: number, end: number }</code></strong></p><p>Used to get the position information of a specific track, <strong>the unit is <code>px</code>, and it is the data for the Y-axis</strong>. <strong>If <code>i</code> is a positive integer, it retrieves the position information of <code>track[i]</code>. If it is a negative integer, it retrieves from the end.</strong></p><div class="note custom-block github-alert"><p class="custom-block-title">Hint</p><p>The index starts from <strong><code>0</code></strong> by default, meaning if you pass <code>0</code>, it retrieves the data for the first track.</p></div><p><strong>Example:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the position information of the first track</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTrackLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the position information of the last track</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTrackLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">Hint</p><p>When sending flexible danmaku, if you need to send it to a specific track, this method can be very useful. The position information for facile danmaku is calculated as follows and will render in the center of the track. If you want to keep it the same as facile danmaku, perhaps the same algorithm is used.</p><blockquote><ol><li>For the height of the danmaku, if you can obtain it without calculation, you do not need to use the <code>getHeight()</code> method.</li><li>Ensure that the track you are accessing exists; otherwise, an error will occur. You can check this using <code>manager.trackCount</code>.</li><li>You can open the browser console in our online <a href="https://imtaotao.github.io/danmu/" target="_blank" rel="noreferrer"><strong>demo</strong></a> and enter this code to see the effect.</li></ol></blockquote></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Send a flexible danmaku</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushFlexibleDanmaku</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    direction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">danmaku</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Render in the 4th track</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTrackLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x: (container.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> danmaku.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        y: middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> danmaku.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="manager-cleartrack" tabindex="-1"><code>manager.clearTrack()</code> <a class="header-anchor" href="#manager-cleartrack" aria-label="Permalink to &quot;\`manager.clearTrack()\`&quot;">​</a></h2><p><strong>Type: <code>(i: number) =&gt; void</code></strong></p><p>Used to clear the danmaku rendered on a specific track. <strong>If <code>i</code> is a positive integer, it clears the danmaku on <code>track[i]</code>. If it is a negative integer, it clears from the end.</strong></p><p><strong>Example:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Clear the danmaku on the first track</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Clear the danmaku on the last track</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="manager-len" tabindex="-1"><code>manager.len()</code> <a class="header-anchor" href="#manager-len" aria-label="Permalink to &quot;\`manager.len()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; { stash: number; flexible: number; view: number; all: number }</code></strong></p><p>Returns the current number of danmaku states in the rendering engine, which changes in real-time.</p><ul><li><strong><code>all</code></strong>: The total number of danmaku, including those in memory and those being rendered.</li><li><strong><code>view</code></strong>: The number of danmaku currently being rendered, including both facile danmaku and flexible danmaku.</li><li><strong><code>stash</code></strong>: The number of facile danmaku currently stored in the memory area.</li><li><strong><code>flexible</code></strong>: The number of flexible danmaku, including those being rendered and those in the memory area.</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flexible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="manager-each" tabindex="-1"><code>manager.each()</code> <a class="header-anchor" href="#manager-each" aria-label="Permalink to &quot;\`manager.each()\`&quot;">​</a></h2><p><strong>Type: <code>(fn: (danmaku: Danmaku&lt;T&gt;) =&gt; boolean | void) =&gt; void</code></strong></p><p>Performs <strong>synchronous iteration</strong> over the currently rendering danmaku. The iteration will terminate if the callback function returns <code>false</code>.</p><h2 id="manager-asynceach" tabindex="-1"><code>manager.asyncEach()</code> <a class="header-anchor" href="#manager-asynceach" aria-label="Permalink to &quot;\`manager.asyncEach()\`&quot;">​</a></h2><p><strong>Type: <code>(fn: (danmaku: Danmaku&lt;T&gt;) =&gt; boolean | void) =&gt; Promise&lt;void&gt;</code></strong></p><p>Performs <strong>asynchronous iteration</strong> over the currently rendering danmaku. The iteration will terminate if the callback function returns <code>false</code>.</p><div class="note custom-block github-alert"><p class="custom-block-title">Difference from \`each\`</p><p>The <code>asyncEach</code> method performs time slicing. This means that when there are too many danmaku being rendered, the long execution time of the code during iteration may cause some blocking of the main thread. Time slicing helps alleviate this issue.</p></div><h2 id="manager-mount" tabindex="-1"><code>manager.mount()</code> <a class="header-anchor" href="#manager-mount" aria-label="Permalink to &quot;\`manager.mount()\`&quot;">​</a></h2><p><strong>Type: <code>(node?: HTMLElement | string, { clear?: boolean }) =&gt; void</code></strong></p><p>Mounts the danmaku container of the kernel to an <code>HTML node</code>. This can be a <code>string</code> type CSS selector. The <code>clear</code> parameter can be used to clear previously rendered danmaku, and it defaults to <code>true</code>. If you do not want to clear, you can pass <code>false</code>. After mounting, you can access this node through <code>manager.container.parentNode</code>.</p><div class="note custom-block github-alert"><p class="custom-block-title">Difference from the container node</p><p>The container node is the node where all danmaku are rendered. When we adjust it through <code>manager.setArea()</code>, we are modifying the container node. However, the container node <strong>needs to be mounted to a specific DOM</strong>. This is the distinction between them. The width and height of the container node are both <code>100%</code>.</p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { clear: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h2 id="manager-unmount" tabindex="-1"><code>manager.unmount()</code> <a class="header-anchor" href="#manager-unmount" aria-label="Permalink to &quot;\`manager.unmount()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; void</code></strong></p><p>Unmounts the danmaku container from the currently mounted node. After unmounting, when you access <code>manager.container</code>, it will return <code>null</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="manager-clear" tabindex="-1"><code>manager.clear()</code> <a class="header-anchor" href="#manager-clear" aria-label="Permalink to &quot;\`manager.clear()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; void</code></strong></p><p>Clears the currently rendered and in-memory danmaku, triggering the <code>clear</code> hook.</p><h2 id="manager-updateoptions" tabindex="-1"><code>manager.updateOptions()</code> <a class="header-anchor" href="#manager-updateoptions" aria-label="Permalink to &quot;\`manager.updateOptions()\`&quot;">​</a></h2><p><strong>Type: <code>(newOptions: Partial&lt;ManagerOptions&gt;) =&gt; void</code></strong></p><p>Updates <code>manager.options</code>. If it involves changes in spacing and dimensions, it will automatically format and trigger the <code>updateOptions</code> hook. You can access the updated <code>options</code> within this hook.</p><h2 id="manager-startplaying" tabindex="-1"><code>manager.startPlaying()</code> <a class="header-anchor" href="#manager-startplaying" aria-label="Permalink to &quot;\`manager.startPlaying()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; void</code></strong></p><p>Starts the rendering engine. The kernel will start a timer to poll for rendering. This will trigger the <code>start</code> hook.</p><h2 id="manager-stopplaying" tabindex="-1"><code>manager.stopPlaying()</code> <a class="header-anchor" href="#manager-stopplaying" aria-label="Permalink to &quot;\`manager.stopPlaying()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; void</code></strong></p><p>Stops the rendering engine, and the kernel timer will also be cleared. This will trigger the <code>stop</code> hook.</p><h2 id="manager-hide" tabindex="-1"><code>manager.hide()</code> <a class="header-anchor" href="#manager-hide" aria-label="Permalink to &quot;\`manager.hide()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; Promise&lt;Manager&gt;</code></strong></p><p>Hides the currently rendered danmaku, and any newly rendered danmaku will also be hidden. This will trigger the <code>hide</code> hook.</p><h2 id="manager-show" tabindex="-1"><code>manager.show()</code> <a class="header-anchor" href="#manager-show" aria-label="Permalink to &quot;\`manager.show()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; Promise&lt;Manager&gt;</code></strong></p><p>Shows the currently hidden danmaku. This will trigger the <code>show</code> hook.</p><h2 id="manager-nextframe" tabindex="-1"><code>manager.nextFrame()</code> <a class="header-anchor" href="#manager-nextframe" aria-label="Permalink to &quot;\`manager.nextFrame()\`&quot;">​</a></h2><p><strong>Type: <code>(fn: FrameRequestCallback) =&gt; void</code></strong></p><p>This is a utility method, and the callback function will be triggered in the next frame.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="manager-updateoccludedurl" tabindex="-1"><code>manager.updateOccludedUrl()</code> <a class="header-anchor" href="#manager-updateoccludedurl" aria-label="Permalink to &quot;\`manager.updateOccludedUrl()\`&quot;">​</a></h2><p><strong>Type: <code>(url?: string, el?: string | HTMLElement) =&gt; void</code></strong></p><p>Adds a mask to the specified element (default is the current danmaku container <code>manager.container.node</code>) <strong>to implement the anti-occlusion feature</strong>. If <code>url</code> is not provided, it means canceling the mask. You can specify the DOM node you need by passing a second parameter.</p><div class="note custom-block github-alert"><p class="custom-block-title">Note</p><p>The anti-occlusion feature requires you to continuously call <code>manager.updateOccludedUrl(&#39;url&#39;)</code> to update the mask. The mask image is generally based on the backend&#39;s response (it may be calculated by AI technology to determine the areas of the video that need anti-occlusion, but the actual implementation depends on the business requirements).</p></div><h2 id="manager-render" tabindex="-1"><code>manager.render()</code> <a class="header-anchor" href="#manager-render" aria-label="Permalink to &quot;\`manager.render()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; void</code></strong></p><p>Skips waiting for the next polling and renders immediately. If you have sent a danmaku and do not want to wait for the next polling but want it to render immediately, you can use this method.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unshift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Render immediately</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="manager-remove" tabindex="-1"><code>manager.remove()</code> <a class="header-anchor" href="#manager-remove" aria-label="Permalink to &quot;\`manager.remove()\`&quot;">​</a></h2><p><strong>Type: <code>(pluginName: string) =&gt; void</code></strong></p><p>Removes a specific plugin from the current <code>manager</code> instance, but you must specify the plugin name.</p><h2 id="manager-use" tabindex="-1"><code>manager.use()</code> <a class="header-anchor" href="#manager-use" aria-label="Permalink to &quot;\`manager.use()\`&quot;">​</a></h2><p><strong>Type: <code>(plugin: ManagerPlugin&lt;T&gt; | ((m: this) =&gt; ManagerPlugin&lt;T&gt;)) =&gt; ManagerPlugin&lt;T&gt;</code></strong></p><p>Registers a plugin to the current <code>manager</code> instance and returns the plugin instance. If you need to remove the plugin later, you can save the plugin&#39;s <code>name</code>. If not provided, a <code>uuid</code> format <code>name</code> will be assigned by default.</p><p><strong>If <code>name</code> is provided:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugin.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;test-plugin&#39;</span></span></code></pre></div><p><strong>If <code>name</code> is not provided:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugin.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// uuid</span></span></code></pre></div><h2 id="manager-isshow" tabindex="-1"><code>manager.isShow()</code> <a class="header-anchor" href="#manager-isshow" aria-label="Permalink to &quot;\`manager.isShow()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; boolean</code></strong></p><p>Used to determine whether the current danmaku is in the <code>shown</code> state. Typically, after you call <code>manager.show()</code>, calling this method will return <code>true</code>.</p><h2 id="manager-isfreeze" tabindex="-1"><code>manager.isFreeze()</code> <a class="header-anchor" href="#manager-isfreeze" aria-label="Permalink to &quot;\`manager.isFreeze()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; boolean</code></strong></p><p>Used to determine whether the current danmaku is in the <code>frozen</code> state. Typically, after you call <code>manager.freeze()</code>, calling this method will return <code>true</code>.</p><h2 id="manager-isplaying" tabindex="-1"><code>manager.isPlaying()</code> <a class="header-anchor" href="#manager-isplaying" aria-label="Permalink to &quot;\`manager.isPlaying()\`&quot;">​</a></h2><p><strong>Type: <code>() =&gt; boolean</code></strong></p><p>Used to determine whether the current rendering engine is in the rendering play state. After you call <code>manager.stopPlaying()</code>, it will return <code>false</code>.</p><h2 id="manager-isdanmaku" tabindex="-1"><code>manager.isDanmaku()</code> <a class="header-anchor" href="#manager-isdanmaku" aria-label="Permalink to &quot;\`manager.isDanmaku()\`&quot;">​</a></h2><p><strong>Type: <code>(b: unknown) =&gt; b is Danmaku&lt;T&gt;</code></strong></p><p>Used to determine whether a value is a danmaku instance.</p><h2 id="manager-setarea" tabindex="-1"><code>manager.setArea()</code> <a class="header-anchor" href="#manager-setarea" aria-label="Permalink to &quot;\`manager.setArea()\`&quot;">​</a></h2><p><strong>Type: <code>(data: AreaOptions) =&gt; void</code></strong></p><p>Sets the size of the current container (<code>manager.container.node</code>) and will automatically format. For usage, refer to the <a href="https://github.com/imtaotao/danmu/blob/master/demo/src/components/sidebar/SidebarAreaY.tsx#L26-L31" target="_blank" rel="noreferrer"><strong>demo</strong></a>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AreaOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="manager-setopacity" tabindex="-1"><code>manager.setOpacity()</code> <a class="header-anchor" href="#manager-setopacity" aria-label="Permalink to &quot;\`manager.setOpacity()\`&quot;">​</a></h2><p><strong>Type: <code>(opacity: number | string) =&gt; void</code></strong></p><p>Sets the <strong>opacity</strong> of the current danmaku and subsequent rendered danmaku. If the parameter is a <code>string</code>, it will be automatically converted to a <code>number</code>.</p><h2 id="manager-setstyle" tabindex="-1"><code>manager.setStyle()</code> <a class="header-anchor" href="#manager-setstyle" aria-label="Permalink to &quot;\`manager.setStyle()\`&quot;">​</a></h2><p><strong>Type: <code>(key: StyleKey, val: CSSStyleDeclaration[StyleKey]) =&gt; void</code></strong></p><p>Sets the <strong>CSS style</strong> of the current danmaku and subsequent rendered danmaku.</p><h2 id="manager-setrate" tabindex="-1"><code>manager.setRate()</code> <a class="header-anchor" href="#manager-setrate" aria-label="Permalink to &quot;\`manager.setRate()\`&quot;">​</a></h2><p><strong>Type: <code>(rate: number) =&gt; void</code></strong></p><p>Sets the <strong>speed</strong> of subsequent rendered danmaku. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-setmode" tabindex="-1"><code>manager.setMode()</code> <a class="header-anchor" href="#manager-setmode" aria-label="Permalink to &quot;\`manager.setMode()\`&quot;">​</a></h2><p><strong>Type: <code>(mode: &#39;none&#39; | &#39;strict&#39; | &#39;adaptive&#39;) =&gt; void</code></strong></p><p>Sets the <strong>collision detection algorithm</strong> for subsequent rendered danmaku. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-setgap" tabindex="-1"><code>manager.setGap()</code> <a class="header-anchor" href="#manager-setgap" aria-label="Permalink to &quot;\`manager.setGap()\`&quot;">​</a></h2><p><strong>Type: <code>(gap: number | string) =&gt; void</code></strong></p><p>Sets the <strong>horizontal spacing</strong> between subsequent rendered danmaku. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-settimes" tabindex="-1"><code>manager.setTimes()</code> <a class="header-anchor" href="#manager-settimes" aria-label="Permalink to &quot;\`manager.setTimes()\`&quot;">​</a></h2><p><strong>Type: <code>(times: [number, number]) =&gt; void</code></strong></p><p>Sets the <strong>motion time range</strong> for subsequent rendered danmaku. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-setlimits" tabindex="-1"><code>manager.setLimits()</code> <a class="header-anchor" href="#manager-setlimits" aria-label="Permalink to &quot;\`manager.setLimits()\`&quot;">​</a></h2><p><strong>Type: <code>(limits: { view?: number; stash?: number }) =&gt; void</code></strong></p><p>Set the <strong>number of danmaku to limit in the memory area and rendering area</strong>. The default <code>stash</code> quantity is <code>Infinity</code>, which means no limit. You can set it to a new value for flexible adjustment. It is syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-setinterval" tabindex="-1"><code>manager.setInterval()</code> <a class="header-anchor" href="#manager-setinterval" aria-label="Permalink to &quot;\`manager.setInterval()\`&quot;">​</a></h2><p><strong>Type: <code>(interval: number) =&gt; void</code></strong></p><p>Sets the <strong>polling time</strong> of the rendering engine. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-setdirection" tabindex="-1"><code>manager.setDirection()</code> <a class="header-anchor" href="#manager-setdirection" aria-label="Permalink to &quot;\`manager.setDirection()\`&quot;">​</a></h2><p><strong>Type: <code>(direction: &#39;left&#39; | &#39;right&#39;) =&gt; void</code></strong></p><p>Sets the <strong>direction</strong> for subsequent rendered danmaku. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><h2 id="manager-settrackheight" tabindex="-1"><code>manager.setTrackHeight()</code> <a class="header-anchor" href="#manager-settrackheight" aria-label="Permalink to &quot;\`manager.setTrackHeight()\`&quot;">​</a></h2><p><strong>Type: <code>(trackHeight: number | string) =&gt; void</code></strong></p><p>Sets the <strong>track height</strong>. This is a syntactic sugar for <code>manager.updateOptions()</code> and will trigger the <code>updateOptions</code> hook.</p><div class="note custom-block github-alert"><p class="custom-block-title">Track Height Setting Rule</p><p>The track height should generally be set to <strong>greater than or equal to the height of the danmaku</strong>, otherwise, there will be overlapping danmaku.</p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This will only have 3 tracks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTrackHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;33%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Track height is 100px, and the number of tracks is \`container height / 100px\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTrackHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,145),h=[t];function l(p,r,k,d,o,g){return i(),a("div",null,h)}const y=s(n,[["render",l]]);export{E as __pageData,y as default};
